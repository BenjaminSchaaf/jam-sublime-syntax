# [PackageDev] target_format: plist, ext: tmLanguage
---
name: Jam
scopeName: source.jam
fileTypes: [jm]
uuid: 7424b099-61b0-471e-a716-4eb6aef06440

patterns:
- include: '#instruction'

repository:
  instruction:
    patterns:
    - include: '#comment'
    - include: '#if'
    - include: '#loops'
    - include: '#return'
    - include: '#break'
    - include: '#import'
    - include: '#modifiers'
    - include: '#object'

  comment:
    name: comment.line.jam
    match: "#.*$"

  object:
    patterns:
    - include: '#module'
    - include: '#method'
    - include: '#class'
    - include: '#builtins'
    - include: '#identifier'
    - include: '#numbers'
    - include: '#format-string'

  builtins:
    name: support.jam
    patterns:
    - name: support.function.jam
      match: \bputs\b
    - name: constant.language.jam
      match: \b(true|false|null)\b
    - name: support.class.jam
      match: \b(String|Int|Real|Bool)\b
    - name: constant.other.jam
      match: \bself\b

  identifier:
    name: entity.name.jam
    match: "[_a-zA-Z][_a-zA-Z0-9]*"

  module:
    name: meta.module.jam
    begin: \b(module)\b
    beginCaptures:
      '0': {name: keyword.control.jam}
    end: \b(end)\b
    endCaptures:
      '0': {name: keyword.control.jam}
    patterns:
    - include: '#instruction'

  method:
    name: meta.function.jam
    begin: \b(def)\b
    beginCaptures:
      '0': {name: keyword.control.jam}
    end: \b(end)\b
    endCaptures:
      '0': {name: keyword.control.jam}
    patterns:
    - include: '#instruction'

  constructor:
    name: meta.function.constructor.jam
    begin: \b(new)\b
    beginCaptures:
      '0': {name: keyword.control.jam}
    end: \b(end)\b
    endCaptures:
      '0': {name: keyword.control.jam}
    patterns:
    - include: '#instruction'

  class:
    name: meta.class.jam
    begin: \b(class)\b
    beginCaptures:
      '0': {name: keyword.control.jam}
    end: \b(end)\b
    endCaptures:
      '0': {name: keyword.control.jam}
    patterns:
    - include: '#constructor'
    - include: '#object'

  return:
    name: keyword.control.flow.jam
    match: \b(return)\b

  break:
    name: keyword.control.flow.jam
    match: \b(break)\b

  if:
    name: meta
    begin: \b(if)\b
    beginCaptures:
      '0': {name: keyword.control.flow.jam}
    end: \b(end)\b
    endCaptures:
      '0': {name: keyword.control.flow.jam}
    patterns:
    - name: meta
      match: \b(elif)\b
      captures:
        '0': {name: keyword.control.flow.jam}
    - name: meta
      match: \b(else)\b
      captures:
        '0': {name: keyword.control.flow.jam}
    - include: '#instruction'

  loops:
    name: meta
    begin: \b(while|loop)\b
    beginCaptures:
      '0': {name: keyword.control.flow.jam}
    end: \b(end)\b
    endCaptures:
      '0': {name: keyword.control.flow.jam}
    patterns:
    - include: '#instruction'

  import:
    match: \b(import)\b
    captures:
      '0': {name: keyword.other.jam}

  modifiers:
    name: keyword.other.jam
    match: \b(const|ref|pragma)\b

  format-string:
    name: string.quoted.double.jam
    begin: "\""
    beginCaptures:
      '0': {name: punctuation.definition.string.begin.jam}
    end: "\""
    endCaptures:
      '0': {name: punctuation.definition.string.end.jam}
    patterns:
    - include: '#string-interp'
    - include: '#string-escape'

  string-interp:
    patterns:
    - name: meta
      begin: (#\{)
      beginCaptures:
        '0': {name: keyword.operator}
      end: \}
      endCaptures:
        '0': {name: keyword.operator}
      patterns:
      - include: '#object'

  string-escape:
    name: string
    match: (\\\\\")|(\\\\#\{)

  numbers:
    name: constant.numeric.jam
    match: \b([0-9]([0-9_]*[0-9])?)|(([0-9]([0-9_]*[0-9])?)?\.([0-9]([0-9_]*[0-9])?))|(([0-9]([0-9_]*[0-9])?)\.([0-9]([0-9_]*[0-9])?)?)\b
...
